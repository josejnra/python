[project]
name = "python-snippets"
version = "0.1.0"
description = "my python notes"
authors = [
    {name = "Jose Assis",email = "josenunesra@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
    "bokeh (>=3.7.3,<4.0.0)",
    "folium (>=0.20.0,<0.21.0)",
    "matplotlib (>=3.10.3,<4.0.0)",
    "pydataset (>=0.2.0,<0.3.0)",
    "pymongo (>=4.13.2,<5.0.0)",
    "scikit-learn (>=1.7.0,<2.0.0)",
    "seaborn (>=0.13.2,<0.14.0)",
    "dask (>=2025.5.1,<2026.0.0)",
    "fastparquet (>=2024.11.0,<2025.0.0)",
    "line-profiler (>=4.2.0,<5.0.0)",
    "pycallgraph2 (>=1.1.3,<2.0.0)",
    "memray (>=1.17.2,<2.0.0)",
    "uvicorn (>=0.35.0,<0.36.0)",
    "httpx[http2] (>=0.28.1,<0.29.0)",
    "aiohttp (>=3.12.13,<4.0.0)",
    "fastapi (>=0.115.14,<0.116.0)",
    "duckdb (>=1.3.1,<2.0.0)",
    "pyarrow (>=20.0.0,<21.0.0)",
    "polars (>=1.31.0,<2.0.0)",
    "loguru (>=0.7.3,<0.8.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
package-mode = false

[tool.poetry.group.dev.dependencies]
mypy = "^1.16.1"
taskipy = "^1.14.1"
pytest = "^8.4.1"
pytest-mock = "^3.14.1"
pytest-cov = "^6.2.1"
ruff = "^0.12.1"

[tool.ruff]
line-length = 88
extend-exclude = ["migrations"]
cache-dir = "/tmp/.ruff_cache"
exclude = []

[tool.ruff.lint]
preview = true
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
    "PL",  # pylint
    "PT",  # flake8-pytest-style
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.mypy]
exclude = []
cache_dir = "/tmp/.mypy_cache"

[tool.taskipy.tasks]
lint = 'ruff check . && ruff check . --diff'
format = 'ruff check . --fix && ruff format .'
pre_test = "task lint"
test = "pytest --cov --cov-branch --cov-fail-under=75 --cov-report term --cov-report xml:coverage.xml"
post_test = "coverage html && mypy ."

[tool.pytest.ini_options]
cache_dir = "/tmp/.pytest_cache"
addopts = "-s -x -vv"
testpaths = [
    "tests"
]
